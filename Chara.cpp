#include "Chara.h"


Chara::Chara(){

	// ３Ｄモデルの読み込み
	ModelHandle = MV1LoadModel("dat/Lat式ミク/Lat式ミクVer2.3_Normal.pmd");

	// マップモデルの読み込み
	MapHandle = MV1LoadModel("dat/バトーキン島/batokin_island5.x");

	// ３Ｄモデルの1番目のアニメーションをアタッチする
	AttachIndex = MV1AttachAnim(ModelHandle, 0, -1, FALSE);

	// アタッチしたアニメーションの総再生時間を取得する
	TotalTime = MV1GetAttachAnimTotalTime(ModelHandle, AttachIndex);

	// 再生時間の初期化
	PlayTime = 0.0f;

	// カメラの初期水平角度は１８０度
	AngleH = DX_PI_F;

	// 垂直角度は０度
	AngleV = 0.0f;

	input = new Input();

}

Chara::~Chara(){



}

void Chara::Update() {

	key = GetJoypadInputState(DX_INPUT_KEY_PAD1);
	if ((key & PAD_INPUT_DOWN)) { pos.z -= 1.0f; direction = DOWN; }
	if ((key & PAD_INPUT_UP)) { pos.z += 1.0f; direction = UP; }
	if ((key & PAD_INPUT_LEFT)) { pos.x -= 1.0f; direction = LEFT; }
	if ((key & PAD_INPUT_RIGHT)) { pos.x += 1.0f; direction = RIGHT; }
	if (key == 0) {
		if (running == true) {
			running = false;
			MV1DetachAnim(ModelHandle, AttachIndex);
			AttachIndex = MV1AttachAnim(ModelHandle, 0, -1);
			TotalTime = MV1GetAttachAnimTotalTime(ModelHandle, AttachIndex);
		}
	}
	else {
		if (running == false) {
			running = true;
			MV1DetachAnim(ModelHandle, AttachIndex);
			AttachIndex = MV1AttachAnim(ModelHandle, 1, -1);
			TotalTime = MV1GetAttachAnimTotalTime(ModelHandle, AttachIndex);
		}
	}

	// 再生時間を進める
	PlayTime += 0.8f;

	// 再生時間がアニメーションの総再生時間に達したら再生時間を０に戻す
	if (PlayTime >= TotalTime) {
		PlayTime = 0.0f;
	}

	// 再生時間をセットする
	MV1SetAttachAnimTime(ModelHandle, AttachIndex, PlayTime);

	MV1SetRotationXYZ(ModelHandle, VGet(0.0f, 1.57f * direction, 0.0f));

	// ３Ｄモデルの描画
	MV1SetPosition(ModelHandle, pos);
	MV1DrawModel(ModelHandle);
	MV1DrawModel(MapHandle);

	// パッドの３ボタンか、シフトキーが押されている場合のみ角度変更操作を行う
	if (CheckHitKey(KEY_INPUT_LSHIFT) || (input->nowInput() & PAD_INPUT_C))
	{
		// 「←」ボタンが押されていたら水平角度をマイナスする
		if (input->nowInput() & PAD_INPUT_LEFT)
		{
			AngleH -= CAMERA_ANGLE_SPEED;

			// −１８０度以下になったら角度値が大きくなりすぎないように３６０度を足す
			if (AngleH < -DX_PI_F)
			{
				AngleH += DX_TWO_PI_F;
			}
		}

		// 「→」ボタンが押されていたら水平角度をプラスする
		if (input->nowInput() & PAD_INPUT_RIGHT)
		{
			AngleH += CAMERA_ANGLE_SPEED;

			// １８０度以上になったら角度値が大きくなりすぎないように３６０度を引く
			if (AngleH > DX_PI_F)
			{
				AngleH -= DX_TWO_PI_F;
			}
		}

		// 「↑」ボタンが押されていたら垂直角度をマイナスする
		if (input->nowInput() & PAD_INPUT_UP)
		{
			AngleV -= CAMERA_ANGLE_SPEED;

			// ある一定角度以下にはならないようにする
			if (AngleV < -DX_PI_F / 2.0f + 0.6f)
			{
				AngleV = -DX_PI_F / 2.0f + 0.6f;
			}
		}

		// 「↓」ボタンが押されていたら垂直角度をプラスする
		if (input->nowInput() & PAD_INPUT_DOWN)
		{
			AngleV += CAMERA_ANGLE_SPEED;

			// ある一定角度以上にはならないようにする
			if (AngleV > DX_PI_F / 2.0f - 0.6f)
			{
				AngleV = DX_PI_F / 2.0f - 0.6f;
			}
		}
	}

	// カメラの注視点はプレイヤー座標から規定値分高い座標
	Target = VAdd(getPos(), VGet(0.0f, CAMERA_PLAYER_TARGET_HEIGHT, 0.0f));

	// カメラの座標を決定する
	{
		MATRIX RotZ, RotY;
		float Camera_Player_Length;
		MV1_COLL_RESULT_POLY_DIM HRes;
		int HitNum;

		// 水平方向の回転はＹ軸回転
		RotY = MGetRotY(AngleH);

		// 垂直方向の回転はＺ軸回転 )
		RotZ = MGetRotZ(AngleV);

		// カメラからプレイヤーまでの初期距離をセット
		Camera_Player_Length = CAMERA_PLAYER_LENGTH;

		// カメラの座標を算出
		// Ｘ軸にカメラとプレイヤーとの距離分だけ伸びたベクトルを
		// 垂直方向回転( Ｚ軸回転 )させたあと水平方向回転( Ｙ軸回転 )して更に
		// 注視点の座標を足したものがカメラの座標
		Eye = VAdd(VTransform(VTransform(VGet(-Camera_Player_Length, 0.0f, 0.0f), RotZ), RotY), Target);

		// 注視点からカメラの座標までの間にステージのポリゴンがあるか調べる
		HRes = MV1CollCheck_Capsule(getModelHandle(), -1, Target, Eye, CAMERA_COLLISION_SIZE);
		HitNum = HRes.HitNum;
		MV1CollResultPolyDimTerminate(HRes);
		if (HitNum != 0)
		{
			float NotHitLength;
			float HitLength;
			float TestLength;
			VECTOR TestPosition;

			// あったら無い位置までプレイヤーに近づく

			// ポリゴンに当たらない距離をセット
			NotHitLength = 0.0f;

			// ポリゴンに当たる距離をセット
			HitLength = Camera_Player_Length;
			do
			{
				// 当たるかどうかテストする距離をセット( 当たらない距離と当たる距離の中間 )
				TestLength = NotHitLength + (HitLength - NotHitLength) / 2.0f;

				// テスト用のカメラ座標を算出
				TestPosition = VAdd(VTransform(VTransform(VGet(-TestLength, 0.0f, 0.0f), RotZ), RotY), Target);

				// 新しい座標で壁に当たるかテスト
				HRes = MV1CollCheck_Capsule(getModelHandle(), -1, Target, TestPosition, CAMERA_COLLISION_SIZE);
				HitNum = HRes.HitNum;
				MV1CollResultPolyDimTerminate(HRes);
				if (HitNum != 0)
				{
					// 当たったら当たる距離を TestLength に変更する
					HitLength = TestLength;
				}
				else
				{
					// 当たらなかったら当たらない距離を TestLength に変更する
					NotHitLength = TestLength;
				}

				// HitLength と NoHitLength が十分に近づいていなかったらループ
			} while (HitLength - NotHitLength > 0.1f);

			// カメラの座標をセット
			Eye = TestPosition;
		}
	}

	// カメラの情報をライブラリのカメラに反映させる
	SetEye = VAdd(SetEye, VScale(VSub(Eye, SetEye), 0.2f));
	SetTarget = VAdd(SetTarget, VScale(VSub(Target, SetTarget), 0.2f));
	//SetCameraPositionAndTarget_UpVecY(SetEye, SetTarget);

}

VECTOR Chara::getPos() {

	return pos;

}

int Chara::getModelHandle() {

	return ModelHandle;

}